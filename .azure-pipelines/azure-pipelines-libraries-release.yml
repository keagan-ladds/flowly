trigger:
 branches:
    include:
    - r/*

 paths:
    include:
      - src/libraries

pool:
  vmImage: ubuntu-latest

variables:
  isRelease: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/r/')]
  buildRevision: $[counter(variables['Build.SourceBranch'], 0)]

stages:
  - stage: Prepare
    jobs:
    - job:    
      continueOnError: false   
      pool: 
        vmImage: ubuntu-latest
      steps:
        - bash: |
            echo "A release pipeline has been run against a non-release branch, skipping."
            exit 1
          workingDirectory: $(Build.SourcesDirectory)
          condition: eq(variables.isRelease, false)

        - bash: |
            str=$(Build.SourceBranch)
            echo $str
            if [[ $str =~ ([0-9]+.[0-9]+.[0-9]+)(-[0-9a-zA-Z]+)? ]]; then
              versionSuffix=${BASH_REMATCH[1]}
              versionPrefix=${BASH_REMATCH[2]}
              echo "##vso[build.updatebuildnumber]$versionSuffix.$(buildRevision)$versionPrefix"
            else
              echo "Could not determine release build number from branch name."
              exit 1
            fi
          workingDirectory: $(Build.SourcesDirectory)
          displayName: Set CI/CD Build Number
          condition: eq(variables.isRelease, true)
          

  - stage: Build
    dependsOn: 'Prepare'
    jobs:
    - job:
      displayName: Build
      pool: 
        vmImage: ubuntu-latest
      steps:
      - task: DotNetCoreCLI@2
        inputs:
            command: 'restore'
            projects: '**/libraries/**/*.csproj'
            feedsToUse: 'select'
            
      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '**/libraries/**/*.csproj'
          arguments: '-p:Version=$(Build.BuildNumber)'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'pack'
          packagesToPack: '**/libraries/**/*.csproj'
          versioningScheme: 'byEnvVar'
          versionEnvVar: 'build.buildnumber'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'packages'
          publishLocation: 'Container'

  - stage: Deploy
    dependsOn: Build
    displayName: Deploy
    jobs:
      - job: 
        pool: 
            vmImage: ubuntu-latest
        displayName: Publish to internal feed
        steps:
        - task: DownloadBuildArtifacts@1
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'packages'
            downloadPath: '$(System.ArtifactsDirectory)'

        - task: DotNetCoreCLI@2
          inputs:
            command: 'push'
            packagesToPush: '$(System.ArtifactsDirectory)/packages/*.nupkg'
            nuGetFeedType: 'internal'
            publishVstsFeed: 'f9a3ba6c-3ffc-42f5-9f8a-30e9c233099f'